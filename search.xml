<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字符串详解</title>
      <link href="/post/a7191fd7.html"/>
      <url>/post/a7191fd7.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、字符串的概念（字符串是什么）"><a href="#一、字符串的概念（字符串是什么）" class="headerlink" title="一、字符串的概念（字符串是什么）"></a>一、字符串的概念（字符串是什么）</h2><blockquote><p>java字符串就是Unicode字符序列。java没有内置的字符串类型，而是在标准java类库中提供了一个预定义类，人们自然的就叫做String。</p><p>字符串的底层是一个被final修饰的数组，不能改变</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;java&quot;</span><span class="comment">//等号右边其实就是创建了一个&quot;java&quot;的字符串对象</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>每次用双引号括起来的字符串都是string类的一个对象。</li><li>字符串是常量。他的内容不能改变，他的对象创建也不能更改。</li></ul><p>那么肯定就有人疑问什么是Unicode。</p><h3 id="1-1Unicode字符"><a href="#1-1Unicode字符" class="headerlink" title="1.1Unicode字符"></a>1.1Unicode字符</h3><blockquote><p>Unicode 是国际标准字符集，它将世界各种语言的每个字符定义一个唯一的编码，以满足跨语言、跨平台的文本信息转换</p><p>Unicode 字符集的编码范围是 <strong>0x0000 - 0x10FFFF</strong> , 可以容纳一百多万个字符， 每个字符都有一个独一无二的编码，也即每个字符都有一个二进制数值和它对应，这里的二进制数值也叫 <strong>码点</strong> , 比如：汉字 <strong>“中”</strong> 的 码点是 <strong>0x4E2D</strong>, 大写字母 <strong>A</strong> 的码点是 <strong>0x41</strong>, 具体字符对应的 Unicode 编码可以查询  <a href="https://home.unicode.org/">Unicode字符编码表</a></p></blockquote><h2 id="二、字符串的意义（为什么要用字符串）"><a href="#二、字符串的意义（为什么要用字符串）" class="headerlink" title="二、字符串的意义（为什么要用字符串）"></a>二、字符串的意义（为什么要用字符串）</h2><p>当我们登录社交软件和游戏时的用户名、密码、验证码等，这些其实都是字符串。同时在登录时还有一系列操作。比如：注册，忘记密码等。</p><p>这些在程序员眼里其实都是针对于字符串的操作。如果没有字符串我们用字符数组也能实现，但是太过于复杂，并且浪费时间和空间，所以java就帮我们直接提供了这样的一个类。</p><h2 id="三、字符串的用法（字符串怎么用）"><a href="#三、字符串的用法（字符串怎么用）" class="headerlink" title="三、字符串的用法（字符串怎么用）"></a>三、字符串的用法（字符串怎么用）</h2><p>在这里我们介绍一些常用的字符串用法。</p><p>我们首先想到第一个字符串的用法应该是<strong>拼接</strong>。</p><h3 id="3-1字符串的拼接"><a href="#3-1字符串的拼接" class="headerlink" title="3.1字符串的拼接"></a>3.1字符串的拼接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>+<span class="string">&quot;def&quot;</span>;<span class="comment">//java语言允许使用+号来实现拼接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串虽然可以用+号实现拼接，但是如果我要循环1000000次重复拼接，你就会发现程序运行的时间会非常长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;<span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            s = s + <span class="string">&quot;xyz&quot;</span>;<span class="comment">//重复拼接“xyz”</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么导致这样呢？</p><p>其实是因为字符串每次创建后是不能改变的。每次拼接其实都是新创造一个String对象。循环1000000次相当于创造了1000000个对象，当然运行时长就会更长，效率就会越低。</p><p>其实java也为我们想到了这点，所以特地给了我们StringBuilder类。</p><h3 id="3-2StringBuilder类"><a href="#3-2StringBuilder类" class="headerlink" title="3.2StringBuilder类"></a>3.2StringBuilder类</h3><blockquote><p>StringBuilder类也叫做字符串缓冲区，其实就是一个存放String类型的容器。可以提高字符串的操作效率（可以看成一个长度可以变化的字符串)。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创造了一个stringBuidr的对象</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">           <span class="comment">//append方法是stringBuider里的添加方法</span></span><br><span class="line">           <span class="comment">//为sb重复拼接“xyz ”</span></span><br><span class="line">           sb.append(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(sb);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-1StringBuilder类的底层原理"><a href="#3-2-1StringBuilder类的底层原理" class="headerlink" title="3.2.1StringBuilder类的底层原理"></a>3.2.1StringBuilder类的底层原理</h4><blockquote><p>在使用StringBuilder时，内存中会有一个长度为16的数组，，它内容是可以改变的，每当有一个字符就存进一个索引中，不会创建新的字符串，如果存入的字符串超过了默认16的数组长度，它就会进行自动扩容。如此在内存中始终是一个数组，占用的空间少，那么效率也会比String类的要高</p></blockquote><p>知道了底层原理后，我们来看看它的用法。</p><h4 id="3-2-2StringBuilder类的用法"><a href="#3-2-2StringBuilder类的用法" class="headerlink" title="3.2.2StringBuilder类的用法"></a>3.2.2StringBuilder类的用法</h4><p>刚刚已经讲过了append方法，我们来看看其他的方法。</p><p><strong>1、toString() 方法</strong></p><p>作用：将一个StringBuilder类型的字符串转换为String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创造对象</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//添加字符串</span></span><br><span class="line">       sb.append(<span class="string">&quot;我在玩托儿索&quot;</span>);</span><br><span class="line">        <span class="comment">//将StringBuilder类型的字符串转换为String类型</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       System.out.println(s);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>好处：转化为字符串后可以用字符串的成员方法。</p><p><strong>2.reverse()方法</strong></p><p>作用：将StringBuilder类型的字符串反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创造对象</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//添加字符串</span></span><br><span class="line">       sb.append(<span class="string">&quot;我在玩托儿索&quot;</span>);</span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">       sb.reverse();</span><br><span class="line">        <span class="comment">//将StringBuilder类型的字符串转换为String类型</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       System.out.println(s);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在这里再拓展一下，jdk12过后java又定义了一个类叫stringJoiner。</p><h3 id="3-3stringJoiner类"><a href="#3-3stringJoiner类" class="headerlink" title="3.3stringJoiner类"></a>3.3stringJoiner类</h3><blockquote><p>stringJoiner类似于stringBuilder，不过前者的构造方法不同。<del>如果大家对构造方法不理解可以看我之前的博客</del>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(间隔符号);</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(间隔符号,开始符号,结束符号);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>stringBuiderg构造方法很简单一个是无参的，另一个就是将输入的字符串当做参数的，这里就不过多介绍。</p><p>stringJoiner就可以快捷的将各个字符串间隔符号，或者结束或开始符号直接给出，更加高效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创造对象，并且给出间隔符号&quot;,  &quot;，开始符号&quot;[&quot;，结束符号&quot;]&quot;</span></span><br><span class="line">       <span class="type">StringJoiner</span> <span class="variable">sj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,  &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="comment">//添加方法</span></span><br><span class="line">       sj1.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       sj1.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">       sj1.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">       sj1.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">       System.out.println(sj1);</span><br><span class="line">    <span class="comment">//打印结果为“[1,  2,  3,  4]”</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-4字符串的比较"><a href="#3-4字符串的比较" class="headerlink" title="3.4字符串的比较"></a>3.4字符串的比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;12345abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;12345abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;d35f&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;D35f&quot;</span>;</span><br><span class="line">        <span class="comment">//比较返回类型为boolean类型，如果俩字符串一样返回true，反之false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line">        System.out.println(result1);<span class="comment">//true</span></span><br><span class="line">    <span class="comment">//该方法可以比较（忽略大小写）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> s3.equalsIgnoreCase(s4);</span><br><span class="line">        System.out.println(result2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>作用：第一种常用于密码用户名比较 </p><p>第二种常用于验证码比较</p><h3 id="3-5字符串的截取"><a href="#3-5字符串的截取" class="headerlink" title="3.5字符串的截取"></a>3.5字符串的截取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;12345abc&quot;</span>;</span><br><span class="line">        <span class="comment">//subtring方法重载了俩种</span></span><br><span class="line">        <span class="comment">//只传一个参数的是从该索引到末尾全部截取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.substring(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//传俩个参数的是从该索引截取到后索引的前一位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(s1);<span class="comment">//12345abc</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//2345abc</span></span><br><span class="line">        System.out.println(s3);<span class="comment">//23</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>第二种截取方法参数包左不包右，包前不包后。</li></ul><p>本篇博客就写到这里，我们下篇再见。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
